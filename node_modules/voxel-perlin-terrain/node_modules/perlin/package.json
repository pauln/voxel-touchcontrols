{
  "author": {
    "name": "Maël Nison",
    "email": "nison.mael@gmail.com",
    "url": "http://www.arcastel.com/"
  },
  "name": "perlin",
  "description": "Perlin noise implementation",
  "version": "0.0.2",
  "homepage": "http://github.com/maxogden/js.perlin/",
  "repository": {
    "type": "git",
    "url": "git://github.com/maxogden/js.perlin.git"
  },
  "readme": "# JS.Perlin\n\n**forked from https://github.com/arcanis/js.perlin and made into a simple commonjs library**\n\n```npm install perlin```\n\n## Usage\n\n- *require('perlin')( [ table ] )*\n\nReturns a new generator instance. If `table` is set, then it will be used\nas random lookup table otherwise a random table will be generated.\n\n- *[instance].octaves*\n- *[instance].frequency*\n- *[instance].persistence*\n\nGenerator configurations variables.\n\n- *[instance].generate( start, size, callback )*\n\nThis function will call `callback()` for each pixel in the N-dimensional\nrange between `start` and `start+size`, with two parameters : the\ncoordinates of the current pixel, and the related Perlin value.\n\n```javascript\nvar generator = require('perlin')( );\n\ngenerator.generate( [ 0, 0 ], [ 2, 2 ], function ( point, value ) {\n    console.log( point, value );\n} );\n```\n\n## Authors\n\nImplementation by Maël Nison, from Jeremy Cochoy's [paper][2].\n\n[2]: http://zenol.fr/dl/perlin_noise.pdf\n",
  "_id": "perlin@0.0.2",
  "dist": {
    "shasum": "ba3363e6da86a9eb8a9984f86ca75f13bdf9aad7"
  },
  "_from": "perlin@0.0.2"
}
